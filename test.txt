'Source: web_exploitation/EV-04/application/learnpress/inc/jwt/rest-api/version1/class-lp-rest-courses-v1-controller.php\n\nreturn $this->add_additional_fields_schema( $schema );\n\t}\n\n\tpublic function get_collection_params() {\n\t\t$params = parent::get_collection_params();\n\n\t\t$params[\'orderby\'][\'enum\'] = array_merge( $params[\'orderby\'][\'enum\'], array( \'menu_order\', \'price\' ) );\n\n\t\t$params[\'category\']      = array(\n\t\t\t\'description\'       => \'Limit the result set to courses assigned to a specific category ID.\',\n\t\t\t\'type\'              => \'string\',\n\t\t\t\'sanitize_callback\' => \'wp_parse_id_list\',\n\t\t\t\'validate_callback\' => \'rest_validate_request_arg\',\n\t\t);\n\t\t$params[\'tag\']           = array(\n\t\t\t\'description\'       => \'Limit the result set to courses assigned to a specific tag ID.\',\n\t\t\t\'type\'              => \'string\',\n\t\t\t\'sanitize_callback\' => \'wp_parse_id_list\',\n\t\t\t\'validate_callback\' => \'rest_validate_request_arg\',\n\t\t);\n\t\t$params[\'course_filter\'] = array(\n\t\t\t\'description\'       => \'Filter by course to in-progress, passed, failed.\',\n\t\t\t\'type\'              => \'string\',\n\t\t\t\'sanitize_callback\' => \'sanitize_text_field\',\n\t\t\t\'validate_callback\' => \'rest_validate_request_arg\',\n\t\t);\n\n\t\t$params[\'on_sale\'] = array(\n\t\t\t\'description\'       => \'Get item learned by user.\',\n\t\t\t\'type\'              => \'boolean\',\n\t\t\t\'validate_callback\' => \'rest_validate_request_arg\',\n\t\t);\n\n\t\t$params[\'popular\']  = array(\n\t\t\t\'description\'       => \'Get item popularity.\',\n\t\t\t\'type\'              => \'boolean\',\n\t\t\t\'validate_callback\' => \'rest_validate_request_arg\',\n\t\t);\n\t\t$params[\'optimize\'] = array(\n\t\t\t\'description\'       => \'Disable some fields in the schema.\',\n\t\t\t\'type\'              => array( \'boolean\', \'string\' ),\n\t\t\t\'validate_callback\' => \'wp_parse_id_list\',\n\t\t);\n\n\t\treturn $params;\n\t}\n}\n\n\nSource: web_exploitation/EV-04/application/learnpress/assets/src/js/frontend/course-filter.js\n\nimport API from \'../api\';\nimport { lpAddQueryArgs, lpFetchAPI, lpGetCurrentURLNoParam } from \'../utils\';\n\nconst classCourseFilter = \'lp-form-course-filter\';\n\n\nSource: web_exploitation/EV-04/application/learnpress/assets/js/dist/frontend/instructors.js\n\n/******/ (() => { // webpackBootstrap\n/******/ \t"use strict";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ "./assets/src/apps/js/frontend/instructors/instructor-list.js":\n/*!********************************************************************!*\\\n  !*** ./assets/src/apps/js/frontend/instructors/instructor-list.js ***!\n  \\********************************************************************/\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ InstructorList)\n/* harmony export */ });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils */ "./assets/src/apps/js/utils/utils.js");\n\nlet query = {};\nlet lpUrlParam = [];\nif (\'undefined\' !== typeof lpSkeletonParam) {\n  lpUrlParam = lpSkeletonParam;\n}\n\n\nSource: web_exploitation/EV-04/application/learnpress/inc/class-lp-query.php\n\nclass LP_Query {\n\t/**\n\t * LP_Query constructor.\n\t */\n\tpublic function __construct() {\n\t\t// Not run in REST API LP, or heartbeat of WP\n\t\tif ( LP_Helper::isRestApiLP() || isset( $_POST[\'action\'] ) && \'heartbeat\' === $_POST[\'action\'] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tadd_action( \'init\', array( $this, \'add_rewrite_tags\' ), 1000 );\n\t\tadd_action( \'init\', array( $this, \'add_rewrite_endpoints\' ) );\n\t\tadd_filter( \'option_rewrite_rules\', [ $this, \'update_option_rewrite_rules\' ], 1 );\n\t}\n\n\t/**\n\t * Parses request params and controls page\n\t *\n\t * @param WP_Query $q\n\t *\n\t * @return mixed\n\t */\n\tpublic function parse_request( $q ) {\n\t\tif ( did_action( \'learn_press_parse_query\' ) ) {\n\t\t\treturn $q;\n\t\t}\n\n\t\tdo_action_ref_array( \'learn_press_parse_query\', array( &$this ) );\n\n\t\treturn $q;\n\t}\n\n\t/**\n\t * Add custom rewrite tags\n\t */\n\tpublic function add_rewrite_tags() {\n\t\t$tags = [\n\t\t\t\'%course-item%\'          => \'([^&]+)\',\n\t\t\t\'%item-type%\'            => \'([^&]+)\',\n\t\t\t\'%question%\'             => \'([^&]+)\',\n\t\t\t\'%user%\'                 => \'([^/]*)\',\n\t\t\t\'%view%\'                 => \'([^/]*)\',\n\t\t\t\'%view_id%\'              => \'(.*)\',\n\t\t\t\'%section%\'              => \'(.*)\',\n\t\t\t\'%content-item-only%\'    => \'(.*)\',\n\t\t\t\'%is_single_instructor%\' => \'(.*)\',\n\t\t\t\'%instructor_name%\'      => \'(.*)\',\n\t\t];\n\n\t\t$tags = apply_filters( \'learn-press/rewrite/tags\', $tags );\n\t\tforeach ( $tags as $tag => $regex ) {\n\t\t\tadd_rewrite_tag( $tag, $regex );\n\t\t}\n\t}\n\n\t/**\n\t * Add custom rewrite endpoints\n\t */\n\tpublic function add_rewrite_endpoints() {\n\t\t$settings = LP_Settings::instance();\n\n\t\t$endpoints = $settings->get_checkout_endpoints();\n\t\tif ( $endpoints ) {\n\t\t\tforeach ( $endpoints as $endpoint => $value ) {\n\t\t\t\tLearnPress::instance()->query_vars[ $endpoint ] = $value;\n\t\t\t\tadd_rewrite_endpoint( $value, EP_PAGES );\n\t\t\t}\n\t\t}\n\n\t\t$endpoints = $settings->get_profile_endpoints();\n\t\tif ( $endpoints ) {\n\t\t\tforeach ( $endpoints as $endpoint => $value ) {\n\t\t\t\tLearnPress::instance()->query_vars[ $endpoint ] = $value;\n\t\t\t\tadd_rewrite_endpoint( $value, EP_PAGES );\n\t\t\t}\n\t\t}\n\n\t\t$endpoints = $settings->get( \'quiz_endpoints\' );\n\t\tif ( $endpoints ) {\n\t\t\tforeach ( $endpoints as $endpoint => $value ) {\n\t\t\t\t$endpoint                                       = preg_replace( \'!_!\', \'-\', $endpoint );\n\t\t\t\tLearnPress::instance()->query_vars[ $endpoint ] = $value;\n\t\t\t\tadd_rewrite_endpoint(\n\t\t\t\t\t$value, /*EP_ROOT | */\n\t\t\t\t\tEP_PAGES\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Add lp rewrite rules\n\t * Format [key_parent][single_key] = [rule => match]\n\t *\n\t * link item course\n\t * link profile\n\t * @return array\n\t * @version 1.0.4\n\t * @modify 4.2.2\n\t * @since 3.0.0\n\t */\n\tpublic function add_rewrite_rules(): array {\n\t\t$rules = array();\n\n\t\ttry {\n\t\t\t$course_item_slugs = LP_Settings::get_course_items_slug();\n\t\t\t$course_slug       = LP_Settings::get_permalink_single_course();\n\t\t\t// For permalink has %course_category%\n\t\t\tif ( preg_match( \'!%course_category%!\', $course_slug ) ) {\n\t\t\t\tif ( ! preg_match( \'!page!\', LP_Helper::getUrlCurrent() ) ) {\n\t\t\t\t\t$course_slug = preg_replace( \'!%course_category%!\', \'([^/]+)/([^/]+)\', $course_slug );\n\n\t\t\t\t\t// Rule single course\n\t\t\t\t\t$rules[\'single-course-with-cat\'][] = [\n\t\t\t\t\t\t"^{$course_slug}/?$" =>\n\t\t\t\t\t\t\t\'index.php?\' . LP_COURSE_CPT . \'=$matches[2]&course_category=$matches[1]\',\n\t\t\t\t\t];\n\n\t\t\t\t\t// Rule single item\n\t\t\t\t\tforeach ( $course_item_slugs as $post_type => $course_item_slug ) {\n\t\t\t\t\t\t$rules[\'course-with-cat-items\'][ $post_type ] = [\n\t\t\t\t\t\t\t"^{$course_slug}(?:/{$course_item_slug}/([^/]+))/?$" =>\n\t\t\t\t\t\t\t\t\'index.php?\' . LP_COURSE_CPT . \'=$matches[2]&course_category=$matches[1]&course-item=$matches[3]&item-type=\' . $post_type,\n\t\t\t\t\t\t];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Rule single course\n\t\t\t\t$rules[\'single-course\'][] = [\n\t\t\t\t\t"^{$course_slug}/([^/]+)/?$" =>\n\t\t\t\t\t\t\'index.php?\' . LP_COURSE_CPT . \'=$matches[1]\',\n\t\t\t\t];\n\n\nSource: web_exploitation/EV-04/application/learnpress/assets/src/js/frontend/course-filter.js\n\nlet signal;\nwindow.lpCourseFilter = {\n\tsearchSuggestion: ( inputSearch ) => {\n\t\tconst enable = parseInt( inputSearch.dataset.searchSuggest || 1 );\n\t\tif ( 1 !== enable ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyword = inputSearch.value.trim();\n\t\tconst form = inputSearch.closest( `.${ classCourseFilter }` );\n\t\tconst elLoading = form.querySelector( \'.lp-loading-circle\' );\n\n\t\tif ( undefined !== timeOutSearch ) {\n\t\t\tclearTimeout( timeOutSearch );\n\t\t}\n\n\t\tif ( keyword && keyword.length > 2 ) {\n\t\t\telLoading.classList.remove( \'hide\' );\n\t\t\ttimeOutSearch = setTimeout( function() {\n\t\t\t\tconst callBackDone = ( response ) => {\n\t\t\t\t\tconst elResult = document.querySelector( \'.lp-course-filter-search-result\' );\n\t\t\t\t\telResult.innerHTML = response.data.content;\n\t\t\t\t\telLoading.classList.add( \'hide\' );\n\t\t\t\t};\n\t\t\t\twindow.lpCourseFilter.callAPICourseSuggest( keyword, callBackDone );\n\t\t\t}, 500 );\n\t\t} else {\n\t\t\tconst elResult = form.querySelector( \'.lp-course-filter-search-result\' );\n\t\t\telResult.innerHTML = \'\';\n\t\t\telLoading.classList.add( \'hide\' );\n\t\t}\n\t},\n\tcallAPICourseSuggest: ( keyword, callBackDone, callBackFinally ) => {\n\t\tif ( undefined !== controller ) {\n\t\t\tcontroller.abort();\n\t\t}\n\t\tcontroller = new AbortController();\n\t\tsignal = controller.signal;\n\n\t\tlet url = API.frontend.apiCourses + \'?c_search=\' + keyword + \'&c_suggest=1\';\n\t\tif ( lpData.urlParams.hasOwnProperty( \'lang\' ) ) {\n\t\t\turl += \'&lang=\' + lpData.urlParams.lang;\n\t\t}\n\n\t\tlet paramsFetch = {\n\t\t\tmethod: \'GET\',\n\t\t};\n\t\tif ( 0 !== parseInt( lpData.user_id ) ) {\n\t\t\tparamsFetch = {\n\t\t\t\t...paramsFetch,\n\t\t\t\theaders: {\n\t\t\t\t\t\'X-WP-Nonce\': lpData.nonce,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tfetch( url, { ...paramsFetch, signal } )\n\t\t\t.then( ( response ) => response.json() )\n\t\t\t.then( ( response ) => {\n\t\t\t\tif ( undefined !== callBackDone ) {\n\t\t\t\t\tcallBackDone( response );\n\t\t\t\t}\n\t\t\t} ).catch( ( error ) => {\n\t\t\t\tconsole.log( error );\n\t\t\t} )\n\t\t\t.finally( () => {\n\t\t\t\tif ( undefined !== callBackFinally ) {\n\t\t\t\t\tcallBackFinally();\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tloadWidgetFilterREST: ( widgetForm ) => {\n\t\tconst parent = widgetForm.closest( `.learnpress-widget-wrapper:not(.${ classProcessing })` );\n\t\tif ( ! parent ) {\n\t\t\treturn;\n\t\t}\n\t\tparent.classList.add( classProcessing );\n\n\t\tconst elOptionWidget = widgetForm.closest( \'div[data-widget]\' );\n\t\tlet elListCourseTarget = null;\n\t\tif ( elOptionWidget ) {\n\t\t\tconst dataWidgetObj = JSON.parse( elOptionWidget.dataset.widget );\n\t\t\tconst dataWidgetObjInstance = JSON.parse( dataWidgetObj.instance );\n\n\t\t\tconst classListCourseTarget = dataWidgetObjInstance.class_list_courses_target || \'.lp-list-courses-default\';\n\t\t\telListCourseTarget = document.querySelector( classListCourseTarget );\n\t\t}\n\n\t\tconst widgetData = parent.dataset.widget ? JSON.parse( parent.dataset.widget ) : \'\';\n\t\tconst lang = lpData.urlParams.lang ? `?lang=${ lpData.urlParams.lang }` : \'\';\n\t\tconst url = API.frontend.apiWidgets + lang;\n\t\tconst formData = new FormData( widgetForm );\n\t\tconst filterCourses = { paged: 1 };\n\t\tconst elLoadingChange = parent.querySelector( \'.lp-widget-loading-change\' );\n\n\t\telLoadingChange.style.display = \'block\';\n\n\t\tfor ( const pair of formData.entries() ) {\n\t\t\tconst key = pair[ 0 ];\n\t\t\tconst value = formData.getAll( key );\n\t\t\tif ( ! filterCourses.hasOwnProperty( key ) ) {\n\t\t\t\tlet value_convert = value;\n\t\t\t\tif ( \'object\' === typeof value ) {\n\t\t\t\t\tvalue_convert = value.join( \',\' );\n\t\t\t\t}\n\t\t\t\tfilterCourses[ key ] = value_convert;\n\t\t\t}\n\t\t}\n\n\t\tif ( \'undefined\' !== typeof lpData.urlParams.page_term_id_current ) {\n\t\t\tfilterCourses.page_term_id_current = lpData.urlParams.page_term_id_current;\n\t\t} else if ( \'undefined\' !== typeof lpData.urlParams.page_tag_id_current ) {\n\t\t\tfilterCourses.page_tag_id_current = lpData.urlParams.page_tag_id_current;\n\t\t}\n\n\nSource: web_exploitation/EV-04/application/learnpress/inc/Models/Courses.php\n\n// Order by\n\t\t$filter->order_by = LP_Helper::sanitize_params_submitted( ! empty( $param[\'order_by\'] ) ? $param[\'order_by\'] : \'post_date\', \'key\' );\n\t\t$filter->order    = LP_Helper::sanitize_params_submitted( ! empty( $param[\'order\'] ) ? $param[\'order\'] : \'DESC\', \'key\' );\n\t\t$filter->limit    = $param[\'limit\'] ?? LP_Settings::get_option( \'archive_course_limit\', 10 );\n\n\t\t// For search suggest courses\n\t\tif ( ! empty( $param[\'c_suggest\'] ) ) {\n\t\t\t$filter->only_fields = [ \'ID\', \'post_title\' ];\n\t\t\t$filter->limit       = apply_filters( \'learn-press/rest-api/courses/suggest-limit\', 10 );\n\t\t}\n\n\t\t$return_type = $param[\'return_type\'] ?? \'html\';\n\t\tif ( \'json\' !== $return_type ) {\n\t\t\t$filter->only_fields = array( \'DISTINCT(ID) AS ID\' );\n\t\t}\n\n\t\tdo_action( \'learn-press/courses/handle_params_for_query_courses\', $filter, $param );\n\t}\n\n\t/**\n\t * Get list course\n\t * Order By: price, title, rating, date ...\n\t * Order: ASC, DES\n\t *\n\t * @param LP_Course_Filter $filter\n\t * @param int $total_rows\n\t *\n\t * @return object|null|string|int\n\t * @author tungnx\n\t * @version 1.0.0\n\t * @sicne 4.1.5\n\t */\n\tpublic static function get_courses( LP_Course_Filter $filter, int &$total_rows = 0 ) {\n\t\t$lp_course_db = LP_Course_DB::getInstance();\n\n\t\ttry {\n\t\t\t// Sort by\n\t\t\t$filter->sort_by = (array) $filter->sort_by;\n\t\t\tforeach ( $filter->sort_by as $sort_by ) {\n\t\t\t\t$filter_tmp                      = clone $filter;\n\t\t\t\t$filter_tmp->only_fields         = array( \'DISTINCT(ID)\' );\n\t\t\t\t$filter_tmp->return_string_query = true;\n\n\t\t\t\tswitch ( $sort_by ) {\n\t\t\t\t\tcase \'on_sale\':\n\t\t\t\t\t\t$filter_tmp = $lp_course_db->get_courses_sort_by_sale( $filter_tmp );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \'on_free\':\n\t\t\t\t\t\t$filter_tmp = $lp_course_db->get_courses_sort_by_free( $filter_tmp );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \'on_paid\':\n\t\t\t\t\t\t$filter_tmp = $lp_course_db->get_courses_sort_by_paid( $filter_tmp );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \'on_feature\':\n\t\t\t\t\t\t$filter_tmp = $lp_course_db->get_courses_sort_by_feature( $filter_tmp );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$filter_tmp = apply_filters( \'lp/courses/filter/sort_by/\' . $sort_by, $filter_tmp );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$query_courses_str = $lp_course_db->get_courses( $filter_tmp );\n\n\t\t\t\t$filter->where[] = "AND ID IN ({$query_courses_str})";\n\t\t\t}\n\n\t\t\t// Order by\n\t\t\tswitch ( $filter->order_by ) {\n\t\t\t\tcase \'price\':\n\t\t\t\tcase \'price_low\':\n\t\t\t\t\tif ( \'price_low\' === $filter->order_by ) {\n\t\t\t\t\t\t$filter->order = \'ASC\';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$filter->order = \'DESC\';\n\t\t\t\t\t}\n\n\t\t\t\t\t$filter = $lp_course_db->get_courses_order_by_price( $filter );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \'popular\':\n\t\t\t\t\t$filter = $lp_course_db->get_courses_order_by_popular( $filter );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \'post_title\':\n\t\t\t\t\t$filter->order = \'ASC\';\n\t\t\t\t\tbreak;\n\t\t\t\tcase \'post_title_desc\':\n\t\t\t\t\t$filter->order_by = \'post_title\';\n\t\t\t\t\t$filter->order    = \'DESC\';\n\t\t\t\t\tbreak;\n\t\t\t\tcase \'menu_order\':\n\t\t\t\t\t$filter->order_by = \'menu_order\';\n\t\t\t\t\t$filter->order    = \'ASC\';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$filter = apply_filters( \'lp/courses/filter/order_by/\' . $filter->order_by, $filter );\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Query get results\n\t\t\t$filter  = apply_filters( \'lp/courses/filter\', $filter );\n\t\t\t$courses = LP_Course_DB::getInstance()->get_courses( $filter, $total_rows );\n\t\t} catch ( Throwable $e ) {\n\t\t\t$courses = [];\n\t\t\terror_log( __FUNCTION__ . \': \' . $e->getMessage() );\n\t\t}\n\n\t\treturn $courses;\n\t}\n}\n\n\nSource: web_exploitation/EV-04/application/learnpress/inc/cache/class-lp-courses-cache.php\n\n<?php\n\n/**\n * Class LP_Courses_Cache\n *\n * @author tungnx\n * @since 4.1.5\n * @version 1.0.0\n */\ndefined( \'ABSPATH\' ) || exit();\n\nclass LP_Courses_Cache extends LP_Cache {\n\t/**\n\t * @var LP_Courses_Cache\n\t */\n\tprotected static $instance;\n\t/**\n\t * @var string\n\t */\n\tprotected $key_group_child = \'courses\';\n\t/**\n\t * @var string Save list keys cached to clear\n\t */\n\tpublic static $keys = \'keys\';\n\tconst KEYS_QUERY_COURSES = \'keys/query_courses\';\n\tconst KEYS_QUERY_COURSES_APP = \'keys/query_courses/app\';\n\tconst KEYS_QUERY_TOTAL_COURSES = \'keys/query_courses/total\';\n\tconst KEYS_COUNT_COURSES_FREE = \'keys/count_courses_free\';\n\tconst KEYS_COUNT_STUDENT_COURSES = \'keys/count_student_courses\';\n\n\t/**\n\t * Get instance\n\t *\n\t * @return self\n\t */\n\tpublic static function instance(): self {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\tpublic function __construct( $has_thim_cache = false ) {\n\t\tparent::__construct( $has_thim_cache );\n\t}\n\n\t/**\n\t * Store list keys cache of query count courses free\n\t *\n\t * @param string $key_cache\n\t *\n\t * @since 4.2.5.4\n\t * @version 1.0.0\n\t */\n\tpublic function save_cache_keys_count_courses_free( string $key_cache ) {\n\t\t$this->save_cache_keys( self::KEYS_COUNT_COURSES_FREE, $key_cache );\n\t}\n\n\t/**\n\t * Store list keys cache of query count student of courses\n\t *\n\t * @param string $key_cache\n\t *\n\t * @since 4.2.5.4\n\t * @version 1.0.0\n\t */\n\tpublic function save_cache_keys_count_student_courses( string $key_cache ) {\n\t\t$this->save_cache_keys( self::KEYS_COUNT_STUDENT_COURSES, $key_cache );\n\t}\n\n\t/**\n\t * Store list keys cache query courses\n\t *\n\t * @param string $key_cache\n\t *\n\t * @since 4.2.5.4\n\t * @version 1.0.0\n\t */\n\tpublic function save_cache_keys_query_courses( string $key_cache ) {\n\t\t$this->save_cache_keys( self::KEYS_QUERY_COURSES, $key_cache );\n\t}\n}\n\n\nSource: web_exploitation/EV-04/application/learnpress/inc/Models/UserModel.php\n\n<?php\n\n/**\n * Class UserModel\n *\n * @version 1.0.0\n * @since 4.2.6.9\n */\n\nnamespace LearnPress\\Models;\n\nuse Exception;\nuse LearnPress\\Models\\UserItems\\UserCourseModel;\nuse LP_Course_DB;\nuse LP_Course_Filter;\nuse LP_Profile;\nuse LP_User;\nuse LP_User_DB;\nuse LP_User_Filter;\n\nuse LP_User_Items_DB;\nuse LP_User_Items_Filter;\nuse stdClass;\nuse Throwable;\nuse WP_Error;'
